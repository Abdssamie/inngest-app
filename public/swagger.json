{
  "openapi": "3.0.0",
  "info": {
    "title": "Inngest App API",
    "version": "1.0.0",
    "description": "API documentation for the Inngest app"
  },
  "servers": [
    {
      "url": "http://localhost:3001"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter your bearer token in the format: Bearer {token}"
      }
    },
    "schemas": {
      "CredentialCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "credential": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "accessToken": {
                "type": "string"
              },
              "refreshToken": {
                "type": "string"
              },
              "expiresIn": {
                "type": "number"
              },
              "scopes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "config": {
            "type": "object"
          }
        }
      },
      "CredentialUpdateRequest": {
        "type": "object",
        "properties": {
          "credential": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "accessToken": {
                "type": "string"
              },
              "refreshToken": {
                "type": "string"
              },
              "expiresIn": {
                "type": "number"
              },
              "scopes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WorkflowCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "trigger": {
            "type": "string"
          },
          "credentials": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "credentialId": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WorkflowUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "trigger": {
            "type": "string"
          },
          "credentials": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "credentialId": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "security": [
      {
        "bearerAuth": []
      }
    ]
  },
  "paths": {
    "/api/credentials/{id}": {
      "get": {
        "summary": "Get a credential",
        "description": "Returns a single credential for the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single credential."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Credential not found."
          },
          "500": {
            "description": "Error getting credential."
          }
        }
      },
      "put": {
        "summary": "Update a credential",
        "description": "Updates a single credential for the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated credential."
          },
          "400": {
            "description": "Missing credential in request body."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Error updating credentials."
          }
        }
      },
      "delete": {
        "summary": "Delete a credential",
        "description": "Deletes a single credential for the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Credentials deleted successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Error deleting credentials."
          }
        }
      }
    },
    "/api/credentials": {
      "get": {
        "summary": "Get all user credentials",
        "description": "Returns a list of all credentials for the authenticated user.",
        "responses": {
          "200": {
            "description": "A list of credentials."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Error getting credentials."
          }
        }
      },
      "post": {
        "summary": "Store a new credential",
        "description": "Stores a new credential for the authenticated user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created credential."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Error storing credentials."
          }
        }
      }
    },
    "/api/google/auth-url": {
      "get": {
        "summary": "Get Google OAuth URL",
        "description": "Returns a Google OAuth URL for the authenticated user.",
        "responses": {
          "200": {
            "description": "A Google OAuth URL."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/google/callback": {
      "get": {
        "summary": "Google OAuth callback",
        "description": "Handles the Google OAuth callback.",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "state",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects to the integrations page."
          },
          "400": {
            "description": "Missing code or state from Google OAuth callback."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/inngest": {
      "get": {
        "summary": "Inngest endpoint",
        "description": "Inngest endpoint."
      },
      "post": {
        "summary": "Inngest endpoint",
        "description": "Inngest endpoint."
      },
      "put": {
        "summary": "Inngest endpoint",
        "description": "Inngest endpoint."
      }
    },
    "/api/schedules": {
      "get": {
        "summary": "Get all schedules",
        "description": "Returns a list of all schedules for the authenticated user.",
        "responses": {
          "200": {
            "description": "A list of schedules."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "summary": "Create a new schedule",
        "description": "Creates a new schedule and triggers the corresponding Inngest workflow.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "eventName",
                  "cronExpression"
                ],
                "properties": {
                  "eventName": {
                    "type": "string",
                    "example": "app/schedule/report.requested"
                  },
                  "cronExpression": {
                    "type": "string",
                    "example": "0 9 * * *"
                  },
                  "timezone": {
                    "type": "string",
                    "example": "America/New_York"
                  },
                  "payload": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created schedule."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/webhooks": {
      "post": {
        "summary": "Clerk webhook",
        "description": "Handles Clerk webhooks.",
        "responses": {
          "200": {
            "description": "Webhook received."
          },
          "400": {
            "description": "Error verifying webhook."
          },
          "500": {
            "description": "Error processing webhook."
          }
        }
      }
    },
    "/api/workflows/{id}": {
      "get": {
        "summary": "Get a workflow",
        "description": "Returns a single workflow for the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single workflow."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Workflow not found."
          },
          "500": {
            "description": "Error getting workflow."
          }
        }
      },
      "put": {
        "summary": "Update a workflow",
        "description": "Updates a single workflow for the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated workflow."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Error updating workflow."
          }
        }
      },
      "delete": {
        "summary": "Delete a workflow",
        "description": "Deletes a single workflow for the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow deleted successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Error deleting workflow."
          }
        }
      }
    },
    "/api/workflows/{id}/run": {
      "post": {
        "summary": "Run a workflow",
        "description": "Runs a workflow by its ID for the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow run successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Workflow not found."
          },
          "500": {
            "description": "Error running workflow."
          }
        }
      }
    },
    "/api/workflows": {
      "get": {
        "summary": "Get all workflows",
        "description": "Returns a list of all workflows for the authenticated user.",
        "responses": {
          "200": {
            "description": "A list of workflows."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Error getting workflows."
          }
        }
      },
      "post": {
        "summary": "Create a new workflow",
        "description": "Creates a new workflow for the authenticated user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created workflow."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Error creating workflow."
          }
        }
      }
    }
  },
  "tags": []
}